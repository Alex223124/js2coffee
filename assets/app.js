;(function () {

  var editor, preview, output, error;

  CodeMirror.registerHelper("lint", "javascript", validator);
  function validator(text, options) {
    return makeCmMessages(output, error);
  }

  var defaultText = [
    '/*',
    ' * Welcome to the new js2coffee, now',
    ' * rewritten to use esprima, currently',
    ' * in development.',
    ' */',
    'function listen (el, event, handler) {',
    '  if (el.addEventListener) {',
    '    return el.addEventListener(event, handler);',
    '  } else {',
    '    return el.attachEvent("on" + event, function() {',
    '      return handler.call(el);',
    '    });',
    '  }',
    '}'
  ].join("\n");

  ready(function () {
    editor = CodeMirror(q('.code-box.left'), {
      value: defaultText,
      theme: 'ambiance',
      mode: 'javascript',
      tabSize: 2,
      gutters: ["CodeMirror-lint-markers"],
      lint: true,
      autofocus: true
    });

    preview = CodeMirror(q('.code-box.right'), {
      value: defaultText,
      theme: 'ambiance',
      mode: 'coffeescript',
      tabSize: 2
    });

    editor.on('change', update);
    editor.on('focus', onfocus(q('.code-box.left')));
    editor.on('blur',  onblur(q('.code-box.left')));
    preview.on('focus', onfocus(q('.code-box.right')));
    preview.on('blur',  onblur(q('.code-box.right')));
    update();
  });

  function update() {
    var input = editor.getValue();

    try {
      output = Js2coffee.build(input);
      error = null;
      var kode = output.code;
      kode += "\n# ---\n# Generated by js2coffee-redux " +
        Js2coffee.version;
      preview.setValue(kode);
      removeClass(q('.code-box.right'), 'error');
    } catch (err) {
      error = err;
      addClass(q('.code-box.right'), 'error');
    }
  }

  function onfocus ($el) {
    return function () { addClass($el, 'focus'); };
  }

  function onblur ($el) {
    return function () { removeClass($el, 'focus'); };
  }

  function setFocus (which) {

    qa('.code-box').forEach(function ($el) {
      removeClass($el, 'focus');
    });
    addClass(q('.code-box.'+which), 'focus');
  }

  /*
   * converts js2coffee errors into codemirror messages
   * returns an array
   */

  function makeCmMessages (output, error) {
    return getErrors().concat(getWarnings());

    function getErrors() {
      if (!error) return [];
      var pos = getPosition(error);
      return [{
        from: pos.from, to: pos.to, severity: 'error',
        message: error.description
      }];
    }

    function getPosition (error) {
      var from, to;
      from = CodeMirror.Pos(error.start.line-1, error.start.column);

      if (error.end)
        to = CodeMirror.Pos(error.end.line-1, error.end.column);
      else
        to = CodeMirror.Pos(error.start.line-1, error.start.column + 90);

      return { from: from, to: to };
    }

    function getWarnings() {
      if (!output || !output.warnings || output.warnings.length === 0)
        return [];

      return output.warnings.map(function (warn) {
        var pos = getPosition(warn);
        return {
          from: pos.from, to: pos.to,
          severity: 'warning',
          message: warn.description
        };
      });
    }
  }

  /*
   * Helpers taken from npmjs.com/dom101
   */

  function ready (fn) {
    if (document.addEventListener) {
      document.addEventListener('DOMContentLoaded', fn);
    } else {
      document.attachEvent('onreadystatechange', function() {
        if (document.readyState === 'interactive') fn();
      });
    }
  }

  function q (query) {
    return document.querySelector(query);
  }

  function qa (query) {
    return document.querySelectorAll(query);
  }

  function on (el, event, handler) {
    if (el.addEventListener) {
      el.addEventListener(event, handler);
    } else {
      el.attachEvent('on' + event, function(){
        handler.call(el);
      });
    }
  }

  function removeClass (el, className) {
    if (el.classList) {
      el.classList.remove(className);
    } else {
      var expr =
        new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi');

      el.className = el.className.replace(expr, ' ');
    }
  }

  function addClass (el, className) {
    if (el.classList)
      el.classList.add(className);
    else
      el.className += ' ' + className;
  }

})();
