#!/usr/bin/env node
var args = require('../lib/cli')
  .helpfile(__dirname+'/../Usage.txt')
  .version(require('../package.json').version)
  .minimist({
    boolean: ['ast', 'verbose'],
    alias: { h: 'help', v: 'version', V: 'verbose' }
  });

var read = require('read-input');
var js2coffee = require('../index');

read(args._, function (err, res) {
  if (err) {
    console.error(err);
    process.exit(8);
  }

  res.successes.forEach(function (file) {
    var data = file.data;
    try {
      var out = js2coffee.build(data, { filename: file.name || '[stdin]' });
      if (args.ast) {
        if (!args.verbose)
          out.ast = scrub(out.ast);
        console.log(inspect(out.ast));
      } else {
        process.stdout.write(out.code);
      }
    } catch (err) {
      console.error(err.message);
      if (!err.js2coffee)
        console.error(err.stack);
      process.exit(16);
    }
  });
});

function inspect(data) {
  var colors = process.stdout.isTTY;
  return require('util').inspect(data, { depth: null, colors: colors });
}

/*
 * removes "range" and "loc"
 */

function scrub(obj) {
  if (Array.isArray(obj)) {
    return obj.map(function (item) { return scrub(item); });
  } else if (typeof obj === 'object') {
    for (var key in obj) {
      if (!obj.hasOwnProperty(key)) continue;
      if (key === 'range' || key === 'loc') {
        delete obj[key];
      } else {
        obj[key] = scrub(obj[key]);
      }
    }
    return obj;
  } else {
    return obj;
  }
}
